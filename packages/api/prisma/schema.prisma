// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["deno", "fullTextSearch"]
  output          = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

enum LogLevel {
  Info
  Warn
  Error
}

model Log {
  id                  String      @id @default(cuid())
  level               LogLevel
  message             String
  meta                Json

  createdAt           DateTime    @default(now())
}

model User {
  id                  String      @id @default(cuid())
  email               String      @unique
  fullname            String
  bio                 String
  profilePictureUri   String
  githubHandle        String
  twitterHandle       String

  lastSeenAt          DateTime?
  profileMemberships  ProfileMembership[]

  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  deletedAt           DateTime?
}

enum ProfileType {
  Individual
  // MeetupOrganization
  // InterestOrganization
  // EducationalOrganization
  // HobbyOrganization
  Organization
  // ContentPlatform
  // SoftwareProject
  Product
}

model Profile {
  id                  String      @id @default(cuid())
  type                ProfileType
  slug                String      @unique
  email               String      @unique

  title               String
  description         String

  pages               ProfilePage[]
  links               ProfileLink[]
  memberships         ProfileMembership[]

  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  deletedAt           DateTime?
}

model ProfilePage {
  id                  String      @id @default(cuid())
  slug                String
  title               String
  content             String
  publishedAt         DateTime?

  profile             Profile     @relation(fields: [profileId], references: [id])
  profileId           String

  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  deletedAt           DateTime?
}

model ProfileLink {
  id                  String      @id @default(cuid())
  slug                String
  title               String
  description         String
  uri                 String

  profile             Profile     @relation(fields: [profileId], references: [id])
  profileId           String

  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  deletedAt           DateTime?
}

enum ProfileMembershipRole {
  Owner
  Lead
  Maintainer
  Contributor
  Sponsor
  Follower
}

model ProfileMembership {
  id                  String      @id @default(cuid())
  role                ProfileMembershipRole

  profile             Profile     @relation(fields: [profileId], references: [id])
  profileId           String

  user                User        @relation(fields: [userId], references: [id])
  userId              String

  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  deletedAt           DateTime?
}
