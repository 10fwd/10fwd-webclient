// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["deno", "fullTextSearch"]
  output          = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

enum LogLevel {
  Info
  Warn
  Error
}

model Log {
  id                           String                 @id @default(cuid())
  level                        LogLevel
  message                      String
  meta                         Json

  createdAt                    DateTime               @default(now())
}

model Language {
  code                         String                 @id
  name                         String
  englishName                  String
  flag                         String
  order                        Int

  userTranslations             UserTx[]
  profileTranslations          ProfileTx[]
  profileLinkTranslations      ProfileLinkTx[]
  profilePageTranslations      ProfilePageTx[]
  profileStoryTranslations     ProfileStoryTx[]
}

model User {
  id                           String                 @id @default(cuid())
  email                        String                 @unique
  profilePictureUri            String?
  githubHandle                 String
  twitterHandle                String

  fullname                     String // TODO(@eser) will be removed
  bio                          String // TODO(@eser) will be removed
  languages                    UserTx[]

  lastSeenAt                   DateTime?
  profileMemberships           ProfileMembership[]

  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime?              @updatedAt
  deletedAt                    DateTime?
}

model UserTx {
  id                           String                 @id @default(cuid())

  user                         User                   @relation(fields: [userId], references: [id])
  userId                       String

  language                     Language               @relation(fields: [languageCode], references: [code])
  languageCode                 String

  fullnameTx                   String
  bioTx                        String

  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime?              @updatedAt
  deletedAt                    DateTime?

  @@unique([userId, languageCode])
}

enum ProfileType {
  Individual
  // MeetupOrganization
  // InterestOrganization
  // EducationalOrganization
  // HobbyOrganization
  Organization
  // ContentPlatform
  // SoftwareProject
  Product
}

model Profile {
  id                           String                 @id @default(cuid())
  type                         ProfileType
  slug                         String                 @unique
  profilePictureUri            String?

  title                        String // TODO(@eser) will be removed
  description                  String // TODO(@eser) will be removed
  languages                    ProfileTx[]

  links                        ProfileLink[]
  pages                        ProfilePage[]
  stories                      ProfileStory[]
  memberships                  ProfileMembership[]

  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime?              @updatedAt
  deletedAt                    DateTime?
}

model ProfileTx {
  id                           String                 @id @default(cuid())

  profile                      Profile                @relation(fields: [profileId], references: [id])
  profileId                    String

  language                     Language               @relation(fields: [languageCode], references: [code])
  languageCode                 String

  titleTx                      String
  descriptionTx                String

  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime?              @updatedAt
  deletedAt                    DateTime?

  @@unique([profileId, languageCode])
}

model ProfileLink {
  id                           String                 @id @default(cuid())
  slug                         String
  iconSet                      String?
  iconKey                      String?
  uri                          String
  order                        Int

  title                        String // TODO(@eser) will be removed
  description                  String // TODO(@eser) will be removed
  languages                    ProfileLinkTx[]

  profile                      Profile                @relation(fields: [profileId], references: [id])
  profileId                    String

  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime?              @updatedAt
  deletedAt                    DateTime?

  @@index([profileId], type: Hash)
  @@unique([profileId, slug])
}

model ProfileLinkTx {
  id                           String                 @id @default(cuid())

  profileLink                  ProfileLink            @relation(fields: [profileLinkId], references: [id])
  profileLinkId                String

  language                     Language               @relation(fields: [languageCode], references: [code])
  languageCode                 String

  titleTx                      String
  descriptionTx                String

  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime?              @updatedAt
  deletedAt                    DateTime?

  @@unique([profileLinkId, languageCode])
}

model ProfilePage {
  id                           String                 @id @default(cuid())
  slug                         String
  order                        Int
  publishedAt                  DateTime?

  title                        String // TODO(@eser) will be removed
  content                      String // TODO(@eser) will be removed
  languages                    ProfilePageTx[]

  profile                      Profile                @relation(fields: [profileId], references: [id])
  profileId                    String

  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime?              @updatedAt
  deletedAt                    DateTime?

  @@index([profileId], type: Hash)
  @@unique([profileId, slug])
}

model ProfilePageTx {
  id                           String                 @id @default(cuid())

  profilePage                  ProfilePage            @relation(fields: [profilePageId], references: [id])
  profilePageId                String

  language                     Language               @relation(fields: [languageCode], references: [code])
  languageCode                 String

  titleTx                      String
  contentTx                    String

  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime?              @updatedAt
  deletedAt                    DateTime?

  @@unique([profilePageId, languageCode])
}

enum ProfileStoryCategory {
  Status
  Announcement
  News
}

model ProfileStory {
  id                           String                 @id @default(cuid())
  slug                         String
  category                     ProfileStoryCategory
  isFeatured                   Boolean                @default(false)
  publishedAt                  DateTime?

  title                        String // TODO(@eser) will be removed
  content                      String // TODO(@eser) will be removed
  languages                    ProfileStoryTx[]

  profile                      Profile                @relation(fields: [profileId], references: [id])
  profileId                    String

  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime?              @updatedAt
  deletedAt                    DateTime?

  @@index([profileId], type: Hash)
  @@unique([profileId, slug])
}

model ProfileStoryTx {
  id                           String                 @id @default(cuid())

  profileStory                 ProfileStory           @relation(fields: [profileStoryId], references: [id])
  profileStoryId               String

  language                     Language               @relation(fields: [languageCode], references: [code])
  languageCode                 String

  titleTx                      String
  contentTx                    String

  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime?              @updatedAt
  deletedAt                    DateTime?

  @@unique([profileStoryId, languageCode])
}

enum ProfileMembershipRole {
  Owner
  Lead
  Maintainer
  Contributor
  Sponsor
  Follower
}

model ProfileMembership {
  id                           String                 @id @default(cuid())
  role                         ProfileMembershipRole

  profile                      Profile                @relation(fields: [profileId], references: [id])
  profileId                    String

  user                         User                   @relation(fields: [userId], references: [id])
  userId                       String

  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime?              @updatedAt
  deletedAt                    DateTime?

  @@index([profileId], type: Hash)
  @@index([userId], type: Hash)
  @@unique([profileId, userId])
}
